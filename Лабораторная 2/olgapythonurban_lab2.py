# -*- coding: utf-8 -*-
"""OlgaPythonUrban_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wia2tsY14yiQgudY3m8rIZaui8BHXlLx

# Итоговый проект. Улицы. Объекты культурного наследия.
"""

# TODO собрать установку всех необходимых модулей в одном месте
!pip install geopandas 
!pip install mapclassify 
!pip install osmnx

# TODO собрать импорты всех модулей в одном месте
import json
import requests
import pandas as pd
import numpy as np
import geopandas as gpd
import osmnx as ox

TILES = "CartoDB positron"  # Название подложки для карт

# TODO указать любой район Санкт-Петербург из OSM https://wiki.openstreetmap.org/wiki/RU:%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3/%D0%A0%D0%B0%D0%B9%D0%BE%D0%BD%D1%8B
TERRITORY_NAME = "Кировский район, Санкт-Петербург"  # название территории для которой будут строиться слои

  # TODO указать ссылку на файл из вашего github репозитория, которая начинается с https://raw.githubusercontent.com/
KGIOP_FILE_URL = "https://raw.githubusercontent.com/mllesuslique/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/kgiop_objects.geojson"  # ссылка на слой с объектами культурного наследия
STREETS_FILE_URL = "https://raw.githubusercontent.com/mllesuslique/PythonUrbanITMO/main/geojson%20%D1%81%D0%BB%D0%BE%D0%B8/streets.geojson"  # ссылка на слой с улицами

"""## Территория

### Загрузка территории из OSM (Extract)
"""

district = ox.geocode_to_gdf(TERRITORY_NAME)
district 
# district.explore(tiles="CartoDB positron")# TODO загрузить geodataframe с геометрией для территории TERRITORY_NAME

"""## Улицы

### Загрузка файла с улицами (Extract)
"""

streets = gpd.read_file(STREETS_FILE_URL, mask=district)
# streets.explore(tiles="CartoDB positron")
# TODO отфильтровать улицы по маске геометрии территории полученной ранее

"""### Обработка данных с улицами (Transform)"""

streets["name"].is_unique
streets.dissolve(by="name")
streets # TODO сгруппировать и объединить геометрии с одинаковыми названиями

"""### Сохранение слоя с улицами (Load)"""

rename_columns = {
    "name": "улица"
}
streets.rename(columns= rename_columns, inplace=True) # TODO переименовать столбцы в русские названия, кроме столбца geometry
streets.index.rename("индекс", inplace=True) # TODO для того чтобы переименовать индекс, нужно обратиться и нему и вызвать от него метод rename (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Index.rename.html)
streets

streets.to_crs(4326).to_file('streets_district.geojson', driver='GeoJSON') # TODO сохранить слой в географической проекции в формате GeoJSON

"""## Объекты культурного наследия

### Загрузка объектов культурного наследия (Extract)
"""

kgiop = gpd.read_file(KGIOP_FILE_URL, mask=district)
kgiop
# TODO отфильтровать улицы по маске геометрии территории полученной ранее

"""### Обработка объектов культурного наследия (Transform)"""

#kgiop.info()
kgiop["lon"] = kgiop.to_crs(4326).geometry.x
kgiop["lat"] = kgiop.to_crs(4326).geometry.y
  # TODO добавить два столбца lon и lat, в которых будут долгота и широта

"""### Сохранение слоя с объектами культурного наследия (Load)"""

#print(kgiop.columns)
rename_columns = {
    "id": "айди",
    "ensemble_name": "название ансамбля",
    "object_name": "название объекта",
    "occurrence_time": "дата строительства",
    "object_location": "адрес",
    "historical_category": "историческая категория",
    "normative_act": "нормативный акт",
    "object_type": "тип объекта",
    "lon": "долгота",
    "lat": "широта"
}
kgiop.rename(columns= rename_columns, inplace=True) # TODO переименовать столбцы в русские названия, кроме столбца geometry
kgiop.index.rename("индекс", inplace=True) # TODO переименовать столбцы в русские названия, кроме столбца geometry
print(kgiop.columns)
kgiop

kgiop.to_crs(4326).to_file('kgiop_district.geojson', driver='GeoJSON') # TODO сохранить слой в географической проекции в формате GeoJSON